Algorithm pseudo code for SudokuSolverLogic

SolveSquareInBoard(row, column, value)
    Find square
        Square(row, column).value = value

    RemoveAllPotentialValuesFromSquare

    RemovePotentialValuesFromSquare(block, value)

    RemovePotentialValuesFromRow(row, value)

    RemovePotentialValuesFromColumn(column, value)

    Foreach square in board
        if(square.potentialValue.size = 1)
            SolveSquareInBoard(square.row, square.column, square.value)

RemovePotentialValuesFromSquare(block, value)
    foreach square in block
        square.potentialValues.remove(value)

RemovePotentialValuesFromRow(row, value)
    foreach square in row
        square.potentialValues.remove(value)

RemovePotentialValuesFromColumn(column, value)
    foreach square in column
        square.potentialValue.remove(value)

RemoveAllPotentialValuesFromSquare(row, column)
    square.potentialValues.purge()

SolveEntireBoard()
    while(notSolved)
        FindSingleNumbersInQuadrents()
        FindRowAndColumnSequencingInQuadrents()

        foreach(square in grid)
            

FindSingleNumbersInQuadrents()
    foreach(quadrent in grid)
        for(1-9)
            numValues = 0
            foreach(square in currentQuadrent where potentialValues.contains(i) and !isSovled())
                numValues++
            if(numValues = 1)
                newSolvedSquare = Squares.Where(potentialValues.contains(i))
                SetSquareValue(newSolvedSquare.row, newSolvedSquare.col, i)

FindRowAndColumnSequencingInQuadrents()
    foreach(quadrent in grid)
        for(1-9)
            List<Squares> squaresWithI = new List
            foreach(square in currentQuadrent where potentialValues.contains(i) and !isSolved())
                squaresWithI.Add(square)
            if(squaresWithI.Count() > 1)
                //Row Logic
                bool sameRow = true
                int diffRow = 0
                
                bool sameCol = true
                int diffCol = 0

                foreach(square in squaresWithI)
                    //First Iteration
                    if(diffRow == 0)
                        diffRow = square.row
                        diffCol = square.col                    
                    if (diffRow != square.row)
                        sameRow = false
                    if (diffCol != square.col)
                        sameCol = false

                //If Same Row
                if(sameRow)
                    RemovePotentialValuesFromSpecifiedRow(diffRow, i)
                    foreach(square in squaresWithI)
                        square.PotentialValues.Add(i)
                else if(sameCol)
                    RemovePotentialValuesFromSpecifiedColumn(diffCol, i)
                    foreach(square in squaresWithI)
                        square.PotentialValues.Add(i)